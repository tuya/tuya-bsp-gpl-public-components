/*
 * cloud39ev3 ak39ev330 dev board dts
 *
 * Copyright (C) 2020 Anyka(Guangzhou) Microelectronics Technology Co., Ltd.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */

/dts-v1/;
#include "anycloud_ak39ev331.dtsi"
#include "anycloud_ak39ev330_nandflash0.dtsi"

/ {
    compatible = "anyka,ak3919ev331";
    model = "ak3919ev331 dev board";
	version = "V1.0.00";
	chosen {
        /* No padding required - the uboot can do that. */
        bootargs = "console=ttySAK0,115200n8 root=/dev/mtdblock5 rootfstype=yaffs2 init=/sbin/init mem=64M memsize=64M";
    };

};
/*
&core_pll {
    clock-div-od = <0>;
    clock-div-n = <3>;
    clock-frequency = <640000000>;
};
*/
&gpio {
    /* anyka,function sharepin func index according to table 2-1 sharepin-list */
    /* index: 0: FUNCTION0, 1: FUNCTION1, 2: FUNCTION2, 3: FUNCTION3, 4: FUNCTION4 */
    /* anyka,pull config value bit[7:0]--pupd config */
    /* bit[7:0]--pupd config, bit[7]:reserved, bit[6:4] 1:enable/ 0:disable, bit[3:0] 0:select PU /1:select PD */

    ircut_pins: ircut_pins {
        anyka,pins = <79>;
        anyka,function = <0>;
        anyka,pull = <0x00000010>;
    };

    dvp0_12bits_pins: dvp0_12bits_pins {
        anyka,pins = <6 7 8 9 64 65 66 67 68 69 70 71 72 73 74 75>;
        anyka,function = <0>;
        anyka,pull = <0x00000001>;

		/*
		 * <new old>, old is pin of IC，is maped to new.
		 * for example:
		 * <73 75>: pin of gpio75 used as gpio73/cis0_d11 function,
		 *     not as origh function gpio75/cis0_d6
		 */
        anyka,map = <73 75
                     72 74
                     70 71
                     71 70
                     74 72
                     75 73>;
    };

    dvp0_10bits_pins: dvp0_10bits_pins {
        anyka,pins = <8 9 64 65 66 67 68 69 70 71 72 73 74 75>;
        anyka,function = <0>;
        anyka,pull = <0x00000001>;

		/*
		 * <new old>, old is pin of IC，is maped to new.
		 * for example:
		 * <73 75>: pin of gpio75 used as gpio73/cis0_d11 function,
		 *     not as origh function gpio75/cis0_d6
		 */
        anyka,map = <73 75
                     72 74
                     70 71
                     71 70
                     74 72
                     75 73>;
    };

    dvp0_8bits_pins: dvp0_8bits_pins {
        anyka,pins = <64 65 66 67 68 69 70 71 72 73 74 75>;
        anyka,function = <0>;
        anyka,pull = <0x00000001>;

		/*
		 * <new old>, old is pin of IC，is maped to new.
		 * for example:
		 * <73 75>: pin of gpio75 used as gpio73/cis0_d11 function,
		 *     not as origh function gpio75/cis0_d6
		 */
        anyka,map = <73 75
                     72 74
                     70 71
                     71 70
                     74 72
                     75 73>;
    };

    mipi0_2lane_pins: mipi0_2lane_pins {
        anyka,pins = <70 71 72 73 74 75>;
        anyka,function = <3 3 3 2 2 2>;
        anyka,pull = <0x00000010>;
    };

    mipi0_1lane_pins: mipi0_1lane_pins {
		/*H3B 1lane时不支持lane1用作其他用途，所以这里按照2lane配置*/
        anyka,pins = <70 71 72 73 74 75>;
        anyka,function = <3 3 3 2 2 2>;
        anyka,pull = <0x00000010>;
    };

    csi0_sclk_pin: csi0_sclk_pin {
        anyka,pins = <64>;
        anyka,function = <0>;
        anyka,pull = <0x00000001>;
    };

    csi1_sclk_pin: csi1_sclk_pin {
        anyka,pins = <3>;
        anyka,function = <2>;
        anyka,pull = <0x00000001>;
    };

    i2c0_pins: i2c0_pins {
        anyka,pins = <27 28>;
        anyka,function = <1>;
        anyka,pull = <0x00000010>;
        //anyka,pull = <0x01011110>;
    };

    mci0_pins: mci0_pins {
        /* 1 line */
        anyka,pins = <31 32 33>;
        anyka,function = <1>;
        anyka,pull = <0x00000010>;
    };

    tf_en_pins:tf_en_pins {
        anyka,pins = <12>;
        anyka,function = <0>;
        anyka,pull = <0x00000010>;
    };

    mci1_pins: mci1_pins {
        /* 4 line */
        anyka,pins = <41 42 24 23 20 19>;
        anyka,function = <1 1 2 2 2 2>;
        anyka,pull = <0x00000010>;
    };
	
    spiflash_pins: spiflash_pins {
        anyka,pins = <25 26 35 36 >; /* 1 LINE mode */
        anyka,function = <1 1 2 2 >;
        anyka,pull = <0x00000010>;
    };

	gpiokey_pins:gpiokey_pins {
			anyka,pins = <84>;
			anyka,function = <0>;
			anyka,pull = <0x00000010>;
	};
    /*speak_en and linein_detect gpio setting */
    speak_en_pins: speak_en_pins {
        anyka,pins = <21>;
        anyka,function = <0>;
        anyka,pull = <0x00000010>;
    };

    uart0_pins: uart0_pins {
        anyka,pins = <1 2>;
        anyka,function = <1>;
        anyka,pull = <0x00000010>;
    };

	phy_reset_pins: phy_reset_pins {
		anyka,pins = <0>;
	    anyka,function = <0>;
        anyka,pull = <0x00000010>;
    };

	/*
	* RMII_MDC(GPIO[10]),RMII_MDIO(GPIO[11]),RMII_TXEN(GPIO[13]),RMII_TXD[0](GPIO[14]), RMII_TXD[1](GPIO15)
	* RMII_RXD[0](GPIO[19]), RMII_RXD[1](GPIO[20]), RMII_RXER(GPIO[23]), RMII_RXDV(GPIO[24]), RMII_50M(OPCLK, GPIO[47])
	*/
    ethernet_pins_rmii: ethernet_pins_rmii {
		anyka,pins 		= <10 11 13 14 15 19 20 23 24 47>;
        anyka,function 	= <1>;
        anyka,pull = <0x00000011 0x00000010 0x00000011 0x00000011 0x00000011 0x00000011 0x00000011 0x00000011 0x00000011 0x00000001>;
    };


    led_pins:led_pins {
        anyka,pins = <5>;
        anyka,function = <0>;
        anyka,pull = <0x00000010>;
    };
};

&rtc {
	 /*
	  * rtc osc_source_select, 1 means INTERNAL RC OSC, 0 means EXTERNAL XTAL
	  * if internal RC OSC is used to generate 32KH,time adjustment should be setting.(basic unit: ms)
	  */
	 osc-select = <1>;
	 adjust-time = <120000>;
   	status = "okay";
};

&watchdog {
	/*max feed dog time = 357s, default setting time = 10s. */
    def_heartbeat = <10>;
    status = "okay";
};

&vencoder {
    status = "okay";
};

&usb {
    status = "okay";
};

&mmc0 {
    bus-width = <0x1>;
    max-frequency = <50000000>;
    /*
     *  detect mode:
     *  (1) non-removable;
     *  (2) detect-gpio/detect-gpios: card detect using gpio
     *      for example:
     *      detect-gpio = <&gpio 76 1>;  or detect-gpios = <&gpio 76 1>;
     *  (3) cd_clk: card detect using MCLK
     */
    cd_clk;
    /* if support highspeed, using cap-sd-highspeed */
    cap-sd-highspeed;
    pinctrl-names = "default","idle";
    pinctrl-0 = <&mci0_pins>,<&tf_en_pins>;
    status = "okay";
};

&mmc1 {
    bus-width = <0x4>;
    max-frequency = <50000000>;
    /*
     *  detect mode:
     *  (1) non-removable;
     *  (2) detect-gpio/detect-gpios: card detect using gpio
     *      for example:
     *      detect-gpio = <&gpio 76 1>;  or detect-gpios = <&gpio 76 1>;
     *  (3) cd_clk: card detect using MCLK
     */
    non-removable;
    /* if support highspeed, using cap-sd-highspeed */
    cap-sd-highspeed;
    /* if support sdio, using cap-sdio-irq*/
    cap-sdio-irq;
    pinctrl-names = "default";
    pinctrl-0 = <&mci1_pins>;
	
    status = "okay";
};


&adc_dac {
    pinctrl-names = "default";
    pinctrl-0 = <&speak_en_pins>;
    /* speak-gpios is which speak_en_pins describes */
    speak-gpios = <&gpio 21 1>;
    /* the level of speak-gpios votage for power on audio: 0=low, 1=high*/
    speak-gpios-en = <1>;
    //linein-gpios = <&gpio 54 1>;
    status = "okay";
};

&saradc{
    /* SAR ADC VREF selection
    * 0:To select AVCC 3.3V as VREF for SAR ADC.
    * 1:To select 3.0V generated from BGR as VREF for SAR ADC.
    */
    vref-select = <1>;
    /*
    * 0:To disable BAT voltage divider.
    * 1:To enable BAT voltage divider divided by 2.
    */
    battery-divider = <1>;
    /*
    * Sampling number
    * Read the sampling data for N times and then calculate the average value.
    * N ranges from 1 to 7.
    */
    sampling-num = <3>;
    status = "okay";
};

&spi0 {
    pinctrl-names = "default";
    pinctrl-0 = <&spiflash_pins>;
    cs-gpios = <&gpio 25 1>;
    status = "okay";
};

&spif0 {
	compatible = "anyka,ak-spinand";
	/* spi flash data bus width:
	** 1 means 1 wire mode.
	** 2 means 2 wire mode
	** 4 means 4 wire mode.
	** default: 4 wire mode.
	**/
	bus-width = <1>;
	status = "okay";
};

&GD5F1GQ4UB{
    status = "okay";
};

&GD5F2GQ4UB{
    status = "okay";
};

&FM25S01A{
    status = "okay";
};

&FM25S02A{
    status = "okay";
};

&GD5F2GQ5UEYIG{
    status = "okay";
};

&GD5F1GQ5UEY1G{
    status = "okay";
};

&W25N02KV{
    status = "okay";
};

&XT26G01A{
    status = "okay";
};

&XT26G02A{
    status = "okay";
};

&FS35ND01G{
    status = "okay";
};

&FS35ND02G{
    status = "okay";
};


&uart0 {
    pinctrl-names = "default";
	pinctrl-0 = <&uart0_pins>;
    status = "okay";
};


&i2c0 {
    pinctrl-names = "default";
    pinctrl-0 = <&i2c0_pins>;

    clock-frequency = <312000>;
    sda-delay = <100>;
    status = "okay";
	#address-cells = <1>;
	#size-cells = <0>;

	sensor0: camera@0x30{
		compatible = "anyka,sensor0";
		reg = <0x30>;

		/*0xffff means the gpio is invalid*/
		reset-gpio = <&gpio 34 1>;
		pwdn-gpio = <&gpio 0xffff 1>;

		port {
			sensor0_0: endpoint@0 {
				remote-endpoint = <&vi_0_0>;
			};
		};
	};
};

&encrypt{
   /*
    * encrypt-mode
    * 0 = CRYPTO_SINGLE_GROUP_MODE ; 1 = CRYPTO_MULTI_GROUP_MODE
    */
    encrypt-mode = <1>;
    status = "okay";
};

&ethernet {
    pinctrl-names = "default";
    pinctrl-0 = <&ethernet_pins_rmii &phy_reset_pins>;
    reset-gpios = <&gpio 0 1>;
	phy-address = <1>;
    status = "okay";
};

&ircut {
    pinctrl-names = "default";
    pinctrl-0 = <&ircut_pins>;

	ircut-a = "79";
	/*set the level for day mode. range: 0, 1*/
	ircut-a-day-level = "0";
	status = "okay";
};

&photosensitive {
    //pinctrl-names = "default";
    //pinctrl-0 = <&photosensitive_pins>;

	/*range: saradc~1, gpio number*/
	photosensitive-port = "saradc0";
	/*the level for day mode, range: low, high*/
	photosensitive-day-level = "high";
    photosensitive-higher-level = "900";
    photosensitive-lower-level = "400";
	status = "okay";
};

&leds {
    pinctrl-names = "default";
    pinctrl-0 = <&led_pins>;
    status = "okay";

    ir_led {
        label = "irled";
        gpios = <&gpio 5 GPIO_ACTIVE_HIGH>;
    };
};

&gpiokeys {
	#address-cells = <1>;
	#size-cells = <0>;
	pinctrl-0 = <&gpiokey_pins>;
	pinctrl-names = "default";
    status = "okay";

	key_detect {
        label = "key_detect";
        gpios = <&gpio 84 1>;
        linux,code = <116>;
        debounce-interval = <100>;
        wakeup-source;
        };
        };



&pwm0 {
	pinctrl-names = "default";

	//pinctrl-0 = <&pwm0_pins>;
	/*
	**frequency of PWM ranges from 92/256Hz(0.36Hz) to 6MHz.
	**duty of PWM ranges from 1 to 65535.
	**Minimum duty cycle:1/65536
	**Maximum duty cyscle:65535/65536.
	**period-ns: period of the PWM signal (in nanoseconds)
        **duty-ns: duty cycle of the PWM signal (in nanoseconds)
	**pwm-enable = 0 means disable pwm function.
	**pwm-enable = 1 means enable pwm function.
	*/
	period-ns = <1000000>;
	duty-ns = <500000>;
	pwm-enable = <1>;
	status = "disable";
};

&pwm1 {
	pinctrl-names = "default";

	//pinctrl-0 = <&pwm1_pins>;
	/*
	**frequency of PWM ranges from 92/256Hz(0.36Hz) to 6MHz.
	**duty of PWM ranges from 1 to 65535.
	**Minimum duty cycle:1/65536
	**Maximum duty cyscle:65535/65536.
	**period-ns: period of the PWM signal (in nanoseconds)
        **duty-ns: duty cycle of the PWM signal (in nanoseconds)
	**pwm-enable = 0 means disable pwm function.
	**pwm-enable = 1 means enable pwm function.
	*/
	period-ns = <1000000>;
	duty-ns = <500000>;
	pwm-enable = <1>;
	status = "disable";
};

&pwm2 {
	pinctrl-names = "default";

	//pinctrl-0 = <&pwm2_pins>;
	/*
	**frequency of PWM ranges from 92/256Hz(0.36Hz) to 6MHz.
	**duty of PWM ranges from 1 to 65535.
	**Minimum duty cycle:1/65536
	**Maximum duty cyscle:65535/65536.
	**period-ns: period of the PWM signal (in nanoseconds)
        **duty-ns: duty cycle of the PWM signal (in nanoseconds)
	**pwm-enable = 0 means disable pwm function.
	**pwm-enable = 1 means enable pwm function.
	*/
	period-ns = <1000000>;
	duty-ns = <500000>;
	pwm-enable = <1>;
	status = "disable";
};

&pwm3 {
	pinctrl-names = "default";

	//pinctrl-0 = <&pwm3_pins>;
	/*
	**frequency of PWM ranges from 92/256Hz(0.36Hz) to 6MHz.
	**duty of PWM ranges from 1 to 65535.
	**Minimum duty cycle:1/65536
	**Maximum duty cyscle:65535/65536.
	**period-ns: period of the PWM signal (in nanoseconds)
        **duty-ns: duty cycle of the PWM signal (in nanoseconds)
	**pwm-enable = 0 means disable pwm function.
	**pwm-enable = 1 means enable pwm function.
	*/
	period-ns = <1000000>;
	duty-ns = <500000>;
	pwm-enable = <1>;
	status = "disable";
};

&pwm4 {
	pinctrl-names = "default";
	//pinctrl-0 = <&pwm4_pins>;
	/*
	**frequency of PWM ranges from 92/256Hz(0.36Hz) to 6MHz.
	**duty of PWM ranges from 1 to 65535.
	**Minimum duty cycle:1/65536
	**Maximum duty cyscle:65535/65536.
	**period-ns: period of the PWM signal (in nanoseconds)
        **duty-ns: duty cycle of the PWM signal (in nanoseconds)
	**pwm-enable = 0 means disable pwm function.
	**pwm-enable = 1 means enable pwm function.
	*/
	period-ns = <1000000>;
	duty-ns = <500000>;
	pwm-enable = <1>;
	status = "disable";
};


&vi0{
	pinctrl-names = "dvp0_12bits", "dvp0_10bits", "dvp0_8bits",
		"mipi0_2lane", "mipi0_1lane",
		"csi0_sclk", "csi1_sclk";
    pinctrl-0 = <&dvp0_12bits_pins>;
    pinctrl-1 = <&dvp0_10bits_pins>;
    pinctrl-2 = <&dvp0_8bits_pins>;
    pinctrl-3 = <&mipi0_2lane_pins>;
    pinctrl-4 = <&mipi0_1lane_pins>;
    pinctrl-5 = <&csi0_sclk_pin>;
    pinctrl-6 = <&csi1_sclk_pin>;
    status = "okay";

	port@0 {
		#address-cells = <1>;
		#size-cells = <0>;

		vi_0_0: endpoint@0 {
			reg = <0>;
			remote-endpoint = <&sensor0_0>;
		};
	};
};
