
/*
 * AK3918EV500 dev board dts
 *
 * Copyright (C) 2018 Anyka(Guangzhou) Microelectronics Technology Co., Ltd.
 *
 * Author: Feilong Dong <dong_feilong@anyka.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */

/dts-v1/;
#include "anycloud_ak37d.dtsi"
#include "anycloud_ak37d_lcd.dtsi"
#include "anycloud_ak37d_norflash.dtsi"
#include "anycloud_ak37d_nandflash1.dtsi"

/ {
    compatible = "anyka,ak3918ev500";
    model = "AK3918EV500 dev board";
	version = "V1.0.02";
};

&gpio {
    /* anyka,function sharepin func index according to table 2-1 sharepin-list */
    /* index: 0: PIN default func, 1: FUNCTION1, 2: FUNCTION2, 3: FUNCTION3, 4: FUNCTION4 */
    /* anyka,pull config value bit[31:24]--slew rate, bit[23:16]--ie, bit[15:8]--drive, bit[7:0]--pupd config */
    /* bit[31:24]--slew rate, 0: slow, 1: fast */
    /* bit[23:16]--ie, input enable, 0: disable, 1: enable */
    /* bit[15:8]--drive, drive strength, 4levels value: 0x0-0x3 */
    /* bit[7:0]--bit[7]: open drain 0:disable, 1:enable (only for gpio31/32);
				pupd config, bit[6:4] 1:enable/ 0:disable, bit[3:0] 0:select PU /1:select PD */

    dvp0_12bits_pins: dvp0_12bits_pins {
        anyka,pins = <25 26 27 28 111 112 113 114 115 116 117 118 119 120 121 122>;
        anyka,function = <1>;
        anyka,pull = <0x01010310>;
    };

    dvp0_10bits_pins: dvp0_10bits_pins {
        anyka,pins = <25 26 27 28 111 112 113 114 115 116 117 118 119 120 121 122>;
        anyka,function = <1>;
        anyka,pull = <0x01010310>;
    };

    dvp0_8bits_pins: dvp0_8bits_pins {
        anyka,pins = <25 26 27 28 111 112 113 114 115 116 117 118 119 120 121 122>;
        anyka,function = <1>;
        anyka,pull = <0x01010310>;
    };

    mipi0_2lane_pins: mipi0_2lane_pins {
        anyka,pins = <25 111 112 113 114 115 116>;
        anyka,function = <1 2 2 2 2 2 2>;
        anyka,pull = <0x01010310>;
    };

    mipi0_1lane_pins: mipi0_1lane_pins {
        anyka,pins = <25 111 112 113 114>;
        anyka,function = <1 2 2 2 2>;
        anyka,pull = <0x01010310>;
    };

    mipi1_2lane_pins: mipi1_2lane_pins {
        anyka,pins = <26 117 118 119 120 121 122>;
        anyka,function = <1 2 2 2 2 2 2>;
        anyka,pull = <0x01010310>;
    };

    mipi1_1lane_pins: mipi1_1lane_pins {
        anyka,pins = <26 117 118 119 120>;
        anyka,function = <1 2 2 2 2>;
        anyka,pull = <0x01010310>;
    };

    csi0_sclk_pin: csi0_sclk_pin {
        anyka,pins = <25>;
        anyka,function = <1>;
        anyka,pull = <0x01010310>;
    };

    csi1_sclk_pin: csi1_sclk_pin {
        anyka,pins = <26>;
        anyka,function = <1>;
        anyka,pull = <0x01010310>;
    };

    i2c0_pins: i2c0_pins {
        anyka,pins = <31 32>;
        anyka,function = <1>;
        anyka,pull = <0x01010380>;
        //anyka,pull = <0x01011110>;
    };
    mci0_pins: mci0_pins {
        anyka,pins = <33 34 35 36 37 38 39 40 41 42>;
        anyka,function = <1>;
        anyka,pull = <0x10010 0x10010 0x10010 0x10010 0x10010 0x10010 0x10010 0x10010 0x10010 0x10010>;/* 4 line */ 
    };

    mci1_pins: mci1_pins {
        anyka,pins = <43 44 45 46 47 48>;
        anyka,function = <1>;
        anyka,pull = <0x10010 0x10000 0x10010 0x10010 0x10010 0x10010>; /* 4 line */

        /* 1 line */
        /*
        anyka,pins = <43 44 45>;
        anyka,function = <1>;
        anyka,pull = <0x10010 0x10000 0x10010>;*/
    };
    
    mci1_idle_pins:mci1_idle_pins{
	anyka,pins = <43 44 45 46 47 48>;
	anyka,function = <0>;
	anyka,pull = <0x00000>; /* 4 line */
    };

    mci2_pins: mci2_pins {
    	/*
        anyka,pins = <91 92 93 94 95 96>;
        anyka,function = <2 2 3 3 3 3>;
        anyka,pull = <0x01010010 0x01010010 0x01010010 0x01010010 0x01010010 0x01010010>;
    	*/
	// 1 line with D[1] as sdio interrupt pin
        anyka,pins = <93 94 95 96>;
        anyka,function = <3>;
        anyka,pull = <0x01010010 0x01010010 0x01010010 0x01010010>;
    };

    tf_en_pins:tf_en_pins{
        anyka,pins = <5>;
	anyka,function = <0>;
        anyka,pull = <0x01000301>;
    };

    wifi_en_pins:wifi_en_pins{
        anyka,pins = <97>;
	    anyka,function = <0>;
        anyka,pull = <0x01000310>;
    };

 

    spiflash_pins: spiflash_pins {
        anyka,pins = <12 3 67 68 69 70>; /* 4 LINE mode, 12 is spi nor cs, 3 is spinand cs*/
        anyka,function = <1 0 0 0 0 0>;
        anyka,pull = <0x01010010>;
    };

    lcd_reset_pins: lcd_reset_pins {
	    anyka,pins = <83>;
	    anyka,function = <0>;
        anyka,pull = <0x01000310>;
    };

	gpiokey_pins:gpiokey_pins {
			anyka,pins = <98>;
			anyka,function = <0>;
			anyka,pull = <0x01010010>;
		};
				
    /*speak_en and linein_detect gpio setting */
    speak_pins: speak_pins {
        anyka,pins = <53>; 
        anyka,function = <0>;
        anyka,pull = <0x01010010>;
    };
    
    uart0_pins: uart0_pins {
        anyka,pins = <1 2>;
        anyka,function = <1>;
        anyka,pull = <0x01010010>;
    };
    
	phy_reset_pins: phy_reset_pins {		
		anyka,pins = <54>;		
	    anyka,function = <0>;
        anyka,pull = <0x01000010>;
    };

    ethernet_pins_rmii: ethernet_pins_rmii {
		anyka,pins 		= <10 11 13 14 15 19 20 23 24 49>;
        anyka,function 	= <1>;
        anyka,pull = <0x01010011 0x01010010 0x01010011 0x01010011 0x01010011 0x01010011 0x01010011 0x01010011 0x01010011 0x01010110>;
    };

    led_pins:led_pins {
        anyka,pins = <4>;
        anyka,function = <0>;
        anyka,pull = <0x00000010>;
    };
};

&rtc {
	 /*
	  * rtc osc_source_select, 1 means INTERNAL RC OSC, 0 means EXTERNAL XTAL
	  * if internal RC OSC is used to generate 32KH,time adjustment should be setting.(basic unit: ms)
	  */
	 osc-select = <1>;
	 adjust-time = <120000>;
   status = "okay";
};

&watchdog {
		/*max feed dog time = 357s, default setting time = 10s. */
    def_heartbeat = <10>;
    status = "okay";
};

&gui {
    status = "okay";
};

&vencoder {
    status = "okay";
};

&vdecoder {
    status = "okay";
};

&usb {
    status = "okay"; 
};

&mmc0 {
    bus-width = <0x8>;
    max-frequency = <50000000>;
    /*
     *  detect mode:
     *  (1) non-removable;
     *  (2) detect-gpio/detect-gpios: card detect using gpio
     *      for example:
     *      detect-gpio = <&gpio 77 1>;  or detect-gpios = <&gpio 77 1>;  
     *  (3) cd_clk: card detect using MCLK
     *  default is non-removable
     */
    cd_clk;
    /* if support highspeed, using cap-sd-highspeed */
    cap-sd-highspeed;
    pinctrl-names = "default";
    pinctrl-0 = <&mci0_pins>;
    status = "disable";
};

&mmc1 {
    bus-width = <0x4>;
    max-frequency = <50000000>;
    /*
     *  detect mode:
     *  (1) non-removable;
     *  (2) detect-gpio/detect-gpios: card detect using gpio
     *      for example:
     *      detect-gpio = <&gpio 77 1>;  or detect-gpios = <&gpio 77 1>;  
     *  (3) cd_clk: card detect using MCLK
     *  default is non-removable
     */
    cd_clk;
    /* if support highspeed, using cap-sd-highspeed */
    cap-sd-highspeed;
    pinctrl-names = "default","idle";
    pinctrl-0 = <&mci1_pins>,<&tf_en_pins>;
    pinctrl-1 = <&mci1_idle_pins>;
    /*
    * support tf card circuit enable function
    */
    power-pins = <&gpio 3 1>;
    power-inverted;
    status = "okay";
};

&mmc2 {
    bus-width = <0x1>;
    max-frequency = <50000000>;
    /*
     *  detect mode:
     *  (1) non-removable;
     *  (2) detect-gpio/detect-gpios: card detect using gpio
     *      detect-gpio = <&gpio 77 1>;
     *      or
     *      detect-gpios = <&gpio 77 1>;
     *  (3) cd_clk: card detect using MCLK
     *  default is non-removable
     */
    non-removable;
    /* if support sdio, using cap-sdio-irq*/
    cap-sdio-irq;
    /* if support highspeed, using cap-sd-highspeed */
    cap-sd-highspeed;
    pinctrl-names = "default";
    pinctrl-0 = <&mci2_pins>;
    /*
    * support sdio wifi circuit enable function
    */
    /*
    pinctrl-0 = <&mci2_pins>,<&wifi_en_pins>;
    pinctrl-1 = <&mci2_idle_pins>;
    power-pins = <&gpio 97 1>;  //power-pins is which wifi_en_pins describes
    */
    status = "okay";
};

&adc_dac {
    pinctrl-names = "default";
    pinctrl-0 = <&speak_pins>;
    speak-gpios = <&gpio 53 1>;
    /*the level of speak-gpios votage for power on audio: 0=low, 1=high*/
    speak-gpios-en = <1>;
    status = "okay";
};

&saradc{
    /* SAR ADC VREF selection
    * 0:To select AVCC 3.3V as VREF for SAR ADC.
    * 1:To select 3.0V generated from BGR as VREF for SAR ADC.
    */
    vref-select = <1>;
    /*
    * 0:To disable BAT voltage divider. 
    * 1:To enable BAT voltage divider divided by 2.
    */
    battery-divider = <1>;
    /*
    * Sampling number
    * Read the sampling data for N times and then calculate the average value.
    * N ranges from 1 to 7.
    */
     sampling-num = <3>;
     status = "okay";
};

&spi0 {
    pinctrl-names = "default";
    pinctrl-0 = <&spiflash_pins>;
    cs-gpios = <&gpio 12 1>, <&gpio 3 1>;
    spi-bus-frequency = <80000000>;
    /*
     * cap-spi-highspeed;
     * if defined, means high speed controller(Maximum 80M/s);
     * if not, means normal speed controller(below 60M/s)
     */
    cap-spi-highspeed;
    status = "okay";
};

&spif0 {
	/* spi flash data bus width:
	** 1 means 1 wire mode.
	** 2 means 2 wire mode
	** 4 means 4 wire mode.
	** default: 4 wire mode.
	**/
	bus-width = <4>;
	status = "okay";
};

&spif1 {
   	status = "okay";
};

&xm25qh64a{
    status = "okay";
};

&xm25qh128a{
    status = "okay"; 
};

&w25q64{
    status = "okay"; 
};

&w25q128{
    status = "okay";
};

&gd25q64{
    status = "okay";
};

&gd25q128{
    status = "okay";
};

&kh25l64{
    status = "okay";
};

&kh25l128{
    status = "okay";
};

&fm25q64{
    status = "okay";
};

&fm25q128{
    status = "okay";
};

&zb25vq64{
    status = "okay";
};

&zb25vq128{
    status = "okay";
};

&by25q64a{
    status = "okay";
};

&by25q128a{
    status = "okay";
};

&pn26f64b{
    status = "okay";
};

&xt25f64b{
    status = "okay";
};

&xt25f128b{
    status = "okay";
};

&xm25qh64c{
    status = "okay";
};

&xm25qh128c{
    status = "okay";
};

&GD5F1GQ4UB{
    status = "okay";
};

&GD5F2GQ4UB{
    status = "okay";
};
/************
&FM25S01A{
    status = "okay";
};

&FM25S02A{
    status = "okay";
};

&GD5F2GQ5UEYIG{
    status = "okay";
};

&GD5F1GQ5UEY1G{
    status = "okay";
};
*********/

&uart0 {
    pinctrl-names = "default";
	pinctrl-0 = <&uart0_pins>;
    status = "okay";
};

&i2c0 {
    pinctrl-names = "default";
    pinctrl-0 = <&i2c0_pins>;

    clock-frequency = <312000>;
    sda-delay = <100>;
    status = "okay";
	#address-cells = <1>;
	#size-cells = <0>;

	sensor0: camera@0x30{
		compatible = "anyka,sensor0";
		reg = <0x30>;

		/*0xffff means the gpio is invalid*/
		reset-gpio = <&gpio 3 1>;
		pwdn-gpio = <&gpio 0xffff 1>;

		port {
			sensor0_0: endpoint@0 {
				remote-endpoint = <&vi_0_0>;
			};
		};
	};
};

&i2c1 {
    pinctrl-names = "default";
    //pinctrl-0 = <&i2c1_pins>;
    
    clock-frequency = <312000>;
    sda-delay = <100>;
    status = "disable";
};


&encrypt{
   /*
    * encrypt-mode
    * 0 = CRYPTO_SINGLE_GROUP_MODE ; 1 = CRYPTO_MULTI_GROUP_MODE
    */
    encrypt-mode = <1>;
    status = "okay";
};

&ethernet {
    pinctrl-names = "default";
    pinctrl-0 = <&ethernet_pins_rmii &phy_reset_pins>;
    reset-gpios = <&gpio 54  1>;
	phy-address = <1>;
    status = "okay";
};

&leds {
    pinctrl-names = "default";
    pinctrl-0 = <&led_pins>;
    status = "okay";

    state_led {
        label = "state_led";
        gpios = <&gpio 4 GPIO_ACTIVE_HIGH>;
    };
};

&adkeys {
	status = "disable";
};

&gpiokeys {
		#address-cells = <1>;
		#size-cells = <0>;
		pinctrl-0 = <&gpiokey_pins>;
		pinctrl-names = "default";
		status = "okay";
		
		key_detect {
		label = "key_detect";
		gpios = <&gpio 98 1>;
		linux,code = <116>;
		debounce-interval = <100>;
		wakeup-source;
		};
};

&motor0 {
	status = "disable";
};

&motor1 {
	status = "disable";
};

&pwm0 {
	pinctrl-names = "default";
	/* frequency of PWM ranges from 92H to 6MHz.*/
	pwm-frequency = <2000000>;
	//pinctrl-0 = <&pwm0_pins>;
	status = "disable";
};

&pwm1 {
	pinctrl-names = "default";
	/* frequency of PWM ranges from 92H to 6MHz.*/
	pwm-frequency = <2000000>;
	//pinctrl-0 = <&pwm1_pins>;
	status = "disable";
};

&pwm2 {
	pinctrl-names = "default";
	/* frequency of PWM ranges from 92H to 6MHz.*/
	pwm-frequency = <2000000>;
	//pinctrl-0 = <&pwm2_pins>;
	status = "disable";
};

&pwm3 {
	pinctrl-names = "default";
	/* frequency of PWM ranges from 92H to 6MHz.*/
	pwm-frequency = <2000000>;
	//pinctrl-0 = <&pwm3_pins>;
	status = "disable";
};

&lcdc {
    pinctrl-names = "default";
    pinctrl-0 = <&lcd_reset_pins>; //<&lcd_pins>,<&lcd_reset_pins>; //lcd_pins for rgb lcd, lcd_reset_pins only for mipi lcd
    reset-pins = <&gpio 83 1>; //only for mipi lcd
    
    lcd-logo-width = <600>;
    lcd-logo-height = <165>;
    //[fmt1:fmt0] 00 16bits input(RGB565 or BGR565)
    //[fmt1:fmt0] 01 24bits input(RGB888 or BGR888)
    //[fmt1:fmt0] 10 or 11 32bits input(ARGB888 ABGR888 RGBA888 BGRA888)
    lcd-logo-fmt0 = <1>;
    lcd-logo-fmt1 = <0>;
    lcd-logo-rgb-seq = <1>; //0 for BGR, 1 for RGB
    
    lcd-fb-type = <1>; //0:single buffer; 1:double buffer
    status = "okay";
};

&vi0{
	pinctrl-names = "dvp0_12bits", "dvp0_10bits", "dvp0_8bits",
		"mipi0_2lane", "mipi0_1lane", "mipi1_2lane", "mipi1_1lane",
		"csi0_sclk", "csi1_sclk";
    pinctrl-0 = <&dvp0_12bits_pins>;
    pinctrl-1 = <&dvp0_10bits_pins>;
    pinctrl-2 = <&dvp0_8bits_pins>;
    pinctrl-3 = <&mipi0_2lane_pins>;
    pinctrl-4 = <&mipi0_1lane_pins>;
    pinctrl-5 = <&mipi1_2lane_pins>;
    pinctrl-6 = <&mipi1_1lane_pins>;
    pinctrl-7 = <&csi0_sclk_pin>;
    pinctrl-8 = <&csi1_sclk_pin>;
    status = "okay";

	port@0 {
		#address-cells = <1>;
		#size-cells = <0>;

		vi_0_0: endpoint@0 {
			reg = <0>;
			remote-endpoint = <&sensor0_0>;
		};
	};
};
