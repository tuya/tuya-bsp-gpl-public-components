/*
 * AK37D svt board dts
 *
 * Copyright (C) 2018 Anyka(Guangzhou) Microelectronics Technology Co., Ltd.
 *
 * Author: Feilong Dong <dong_feilong@anyka.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */

/dts-v1/;
#include "anycloud_ak37d1.dtsi"
#include "anycloud_ak37d_lcd.dtsi"

/ {
    compatible = "anyka,ak37d";
    model = "AK3790D SVT board";
	version = "V1.0.01";
};

  
  
  
  &gpio {
    /* anyka,function sharepin func index according to table 2-1 sharepin-list */
    /* index: 0: PIN default func, 1: FUNCTION1, 2: FUNCTION2, 3: FUNCTION3, 4: FUNCTION4 */
    /* anyka,pull config value bit[31:24]--slew rate, bit[23:16]--ie, bit[15:8]--drive, bit[7:0]--pupd config */
    /* bit[31:24]--slew rate, 0: slow, 1: fast */
    /* bit[23:16]--ie, input enable, 0: disable, 1: enable */
    /* bit[15:8]--drive, drive strength, 4levels value: 0x0-0x3 */
    /* bit[7:0]--pupd config, bit[7:4] 1:enable/ 0:disable, bit[3:0] 0:select PU /1:select PD */

    mci0_pins: mci0_pins {
        anyka,pins = <33 34 35 36 37 38 39 40 41 42>;
        anyka,function = <1>;
        anyka,pull = <0x10010 0x10010 0x10010 0x10010 0x10010 0x10010 0x10010 0x10010 0x10010 0x10010>;/* 4 line */ 
    };

    mci1_pins: mci1_pins {
		anyka,pins = <43 44 45 46 47 48>;
        anyka,function = <1>;
        anyka,pull = <0x10010 0x10000 0x10010 0x10010 0x10010 0x10010>;// 4 line
        /*
		// 1 line 
        anyka,pins = <43 44 45>;
        anyka,function = <1>;
        anyka,pull = <0x10010 0x10000 0x10010>;
		*/

    };
    
    mci2_pins: mci2_pins {
        anyka,pins = <91 92 93 94 95 96>;
        anyka,function = <2 2 3 3 3 3>;
        anyka,pull = <0x01010010 0x01010010 0x01010010 0x01010010 0x01010010 0x01010010>; /* 4 line */

        /* 1 line */
        /*anyka,pins = <93 94 95>;*/
        /*anyka,function = <3>;*/
        /*anyka,pull = <0x01010010 0x01010010 0x01010010>;*/ 
    };
   
    spiflash_pins: spiflash_pins {
        anyka,pins = <12 18 67 68 69 70>; /* 4 LINE mode, 12 is spi nor cs, 18 is spinand cs*/
        anyka,function = <1 0 0 0 0 0>;
        anyka,pull = <0x01010010>;
    };
    
    lcd_pins: lcd_pins {
        anyka,pins = <74 71 72 73
        	          75 76 77 78
        	          79 80 81 82
        	          83 84 85 86
        	          87 88 89 90
        	          91 92 93 94
        	          95 96 97 98>;
        anyka,function = <1>;
        anyka,pull = <0x01010310>;
    };

    speak_pins: speak_pins {
        anyka,pins = <44>; 
        anyka,function = <0>;
        anyka,pull = <1>;
    };

    uart0_pins: uart0_pins {
        anyka,pins = <1 2>;
        anyka,function = <1>;
        anyka,pull = <0x01010010>;
    };

	phy_reset_pins: phy_reset_pins {		
		anyka,pins = <36>;		
	    anyka,function = <0>;
        anyka,pull = <0x01000010>;
    };

    ethernet_pins_rmii: ethernet_pins_rmii {
		anyka,pins 		= <10 11 13 14 15 19 20 23 24 49>;
        anyka,function 	= <1>;
        anyka,pull = <0x01010011 0x01010010 0x01010011 0x01010011 0x01010011 0x01010011 0x01010011 0x01010011 0x01010011 0x01010110>;
    };
};

&rtc {
	   /* 
	   ** rtc osc_source_select, 0 means INTERNAL RC OSC, 1 means EXTERNAL XTAL 
	   */
		osc-select = <0>;
    status = "okay";
};

&watchdog {
    def_heartbeat = <10>;
    status = "okay";
};

&gui {
    status = "okay";
};

&vdecoder {
    status = "okay";
};

&mmc0 {
    bus-width = <0x8>;
    max-frequency = <50000000>;
    /*
     *  detect mode:
     *  (1) non-removable;
     *  (2) detect-gpio/detect-gpios: card detect using gpio
     *      detect-gpio = <&gpio 77 1>;  
     *      or 
     *      detect-gpios = <&gpio 77 1>;  
     *  (3) cd_clk: card detect using MCLK
     *  default is non-removable
     */
    cd_clk;
    /* if support highspeed, using cap-sd-highspeed */
    cap-sd-highspeed;
    pinctrl-names = "default";
    pinctrl-0 = <&mci0_pins>;
    status = "disable";
};

&mmc1 {
    bus-width = <0x4>;
    max-frequency = <50000000>;
    /*
     *  detect mode:
     *  (1) non-removable;
     *  (2) detect-gpio/detect-gpios: card detect using gpio
     *      detect-gpio = <&gpio 77 1>;  
     *      or 
     *      detect-gpios = <&gpio 77 1>;  
     *  (3) cd_clk: card detect using MCLK
     *  default is non-removable
     */
    non-removable;
    /* if support highspeed, using cap-sd-highspeed */
    cap-sd-highspeed;
    pinctrl-names = "default";
    pinctrl-0 = <&mci1_pins>;
    status = "okay";
};

&mmc2 {
    bus-width = <0x1>;
    max-frequency = <50000000>;
    /*
     *  detect mode:
     *  (1) non-removable;
     *  (2) detect-gpio/detect-gpios: card detect using gpio
     *      detect-gpio = <&gpio 77 1>;  
     *      or 
     *      detect-gpios = <&gpio 77 1>;  
     *  (3) cd_clk: card detect using MCLK
     *  default is non-removable
     */
    non-removable;
    /* if support sdio, using cap-sdio-irq*/
    cap-sdio-irq;
    /* if support highspeed, using cap-sd-highspeed */
    cap-sd-highspeed;
    pinctrl-names = "default";
    pinctrl-0 = <&mci2_pins>;
    status = "disable";
};

&adc_dac {
    status = "disable";
};

&saradc{
     status = "okay";
};
&spi0 {
    pinctrl-names = "default";
    pinctrl-0 = <&spiflash_pins>;
    cs-gpios = <&gpio 12 1>, <&gpio 18 1>;
    spi-bus-frequency = <80000000>;
    status = "okay";
    
    spi-flash@0 {
	    compatible = "anyka,ak-spiflash";
		reg = <0>; /* Chip select 0 */
		spi-max-frequency = <80000000>;
		status = "okay";
	};

	spi-flash@1 {
	    compatible = "anyka,ak-spinand";
	    reg = <1>; /* Chip select 1 */
	    spi-max-frequency = <80000000>;
	    status = "disable";
	};
};

&uart0 {
    pinctrl-names = "default";
	pinctrl-0 = <&uart0_pins>;
    status = "okay";
};

&i2c0 {
    pinctrl-names = "default";
    //pinctrl-0 = <&i2c0_pins>;
    status = "disable";
    
    sensor {
        compatible = "anyka,sensor";
        status = "disable";
    };
};

&ethernet {
    pinctrl-names = "default";
    pinctrl-0 = <&ethernet_pins_rmii &phy_reset_pins>;
    reset-gpios = <&gpio 36 1>;
    status = "okay";
};

&leds {
	pinctrl-names = "default";
	//pinctrl-0 = <&led_pins>;
	led-gpios = <&gpio 29 1
                 &gpio 30 1>;
	status = "okay";
};

&adkeys {
	status = "disable";
};

&motor0 {
	status = "disable";
};

&motor1 {
	status = "disable";
};

&pwm0 {
	pinctrl-names = "default";
	/* frequency of PWM ranges from 92H to 6MHz.*/
	pwm-frequency = <2000000>;
	//pinctrl-0 = <&pwm0_pins>;
	status = "disable";
};

&pwm1 {
	pinctrl-names = "default";
	/* frequency of PWM ranges from 92H to 6MHz.*/
	pwm-frequency = <2000000>;
	//pinctrl-0 = <&pwm1_pins>;
	status = "disable";
};

&pwm2 {
	pinctrl-names = "default";
	/* frequency of PWM ranges from 92H to 6MHz.*/
	pwm-frequency = <2000000>;
	//pinctrl-0 = <&pwm2_pins>;
	status = "disable";
};

&pwm3 {
	pinctrl-names = "default";
	/* frequency of PWM ranges from 92H to 6MHz.*/
	pwm-frequency = <2000000>;
	//pinctrl-0 = <&pwm2_pins>;
	status = "disable";
};

&lcdc {
    pinctrl-names = "default";
    pinctrl-0 = <&lcd_pins>; //<&lcd_pins>,<&lcd_reset_pins>; //lcd_reset_pins only for mipi lcd
    
    lcd-logo-width = <600>;
    lcd-logo-height = <165>;
    //[fmt1:fmt0] 00 16bits input(RGB565 or BGR565)
    //[fmt1:fmt0] 01 24bits input(RGB888 or BGR888)
    //[fmt1:fmt0] 10 or 11 32bits input(ARGB888 ABGR888 RGBA888 BGRA888)
    lcd-logo-fmt0 = <1>;
    lcd-logo-fmt1 = <0>;
    lcd-logo-rgb-seq = <1>; //0 for BGR, 1 for RGB
    
    lcd-fb-type = <1>; //0:single buffer; 1:double buffer
    status = "okay";
};

&sat070cp50 {
    status = "okay";
};
